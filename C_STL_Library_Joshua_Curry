//Dr_T Unit 2 COSC-1437 Starter 
/* Task -

Top level solution folder: C_STL_Library_YourLastName

create a single main.cpp that contains code samples and implementations of each of the following topics */

#include <iostream>
#include <vector>
#include <algorithm> 
#include <string>
#include <set>
#include <cassert>
#include <utility>
#include <map>
#include <stack>
#include "Input_Validation_Extended.h"
#include "Class.h"

using namespace std; 
typedef map<string, int> MapT;
typedef MapT::const_iterator MapIterT;
bool less_than_7(int);

//Credit https://www.geeksforgeeks.org/passing-vector-constructor-c/ clarifications added


int main() 
{
    // Part 5     STD library pt 1

    vector<double> vd; //vd elments are floating point numbers
    vector<int> vi; //vi elements are integer numbers 
    vector<string> vs; //vs elements are string objects 

    vd.push_back(1);
    vd.push_back(2);
    vd.push_back(3);
    vd.push_back(55.4);

    vi.push_back(1);
    vi.push_back(2);
    vi.push_back(3);
    //vi.push_back(55.4);

    vs.push_back("one");
    vs.push_back("two");
    vs.push_back("three");

   // display the 3 elements in the vd vector
   cout << "\nValues in vd: \n";

   for(double vals : vd)
   {
     cout << vals << endl; 
   }

   cout << "\nAnother way to print vector: " << endl; 

   for(int i = 0; i < vd.size(); i++)
   {
     cout << vd[i] << endl; 
   }

   //display the 3 elements in the vi vector
   cout << "\nValues in vi: \n";

   for(int vals : vi)
   {
     cout << vals << endl;
   }

   cout << "\nThe other way to print vector: " << endl;

   for(int i = 0; i < vd.size() - 1; i++)
   {
     cout << vi[i] << endl;
   }//This is the form I would have been taught previously; //however, I like the first way you listed here better

   // display the 3 elements in the vs vector
   cout << "\nNames in vs: \n";
   
   for (decltype(vs.size()) i = 0; i < vs.size(); i++)
   {
     cout << vs[i] << endl;
   }

   cout << "\nVector_as_Class_Member" << endl; 

  vector<int> vec1;
  {
    for (int i = 1; i <= 5; i++)
      {
        vec1.push_back(i);
      } 
        MyClassVector1 obj(vec1); 
        obj.print(); 
  }

  cout << "\n"; // new line for spacing
  vector<int> vec2;
  {
    for (int i = 1; i <= 5; i++)
      {
        vec2.push_back(i);
      }
    MyClassVector2 obj(vec2);
    obj.print();
  }

    cout << endl; // new line for spacing
    vector<int> vec3;
    {
      for (int i = 1; i <= 5; i++)
      {
        vec3.push_back(i);
      }
        MyClassVector3 obj(vec3);
        obj.print();
    }

    // Part 11     STD library pt 1

    vector< int > vint(10); // vetor with 3 integer numbers
    vint[0] = 10;
    vint[1] = 20;
    vint[2] = 30;
    vint[3] = 40;
    vint[4] = 50;
    vint[5] = 60;
    vint[6] = 70;
    vint[7] = 80;
    vint[8] = 90;
    vint[9] = 100;

    // Display elements of the vector:
    cout << "\n\nDisplaying the 'vint' elements" << endl; // spacing for output
    vector< int >::iterator it1;
    for(it1 = vint.begin(); it1!= vint.end(); ++it1)
    {
      // Like pointer, iterator is dereferenced to access
      // the value of the element pointed by it1
      cout << " " << *it1;
    }

    // Part 2     STD library pt 2

    stack< int > st;

    st.push(100); //push number on the stack
    assert(st.size() == 1); // verify one element is on the stack
    assert(st.top() == 100); // verify element value

    st.top() = 456; // assign new value
    assert(st.top() == 456);

    st.pop(); // remove element
    assert(st.empty() == true);

    cout << "\n\nIf you are seeing this, part 2, std::stack was a success";

    // Part 3     STD library pt 2

    cout << endl; // give space between outputs
    cout << endl;
    set<int> iset; // set of unique integer numbers

    iset.insert(11); // populate set with some values
    iset.insert(-11);
    iset.insert(55);
    iset.insert(22);
    iset.insert(22);

    if (iset.find(55) != iset.end()) // is value already stored?
    {
      iset.insert(55);
    }

    assert(iset.size() == 4); // sanity check :-)
    set<int >::iterator it2;

    for (it2 = iset.begin(); it2 != iset.end(); it2++)
    {
      cout << " " << *it2;
    }
    // Output: -11 11 22 55

    // Part 4     STD library pt 2

    cout << "\n"; // give space between outputs
    pair<string, string> strstr;
    strstr.first = "Hello";
    strstr.second = "World!";

    pair< string, int > strint("two", 2);
    assert(strint.first == "two");
    assert(strint.second == 2);
    
    // Part 14     STD library pt 2

    cout << "\n"; // give space between outputs
    MapT amap;
    pair< MapIterT, bool > result = amap.insert(make_pair( "Fred", 45));

    assert(result.second == true);
    assert(result.first -> second == 45);

    result = amap.insert(make_pair( "Fred", 54));
    
    //Fred was already in the map, and result.first
    //simply points there now
    assert(result.second == false);
    assert(result.first -> second == 45);

    // Part 16    STD library pt 2

    //cout << "\n" << endl; // give space between outputs
    map< string, string > phone_book;
    phone_book[ "411"] = "Directory";
    phone_book[ "911"] = "Emergency";
    phone_book[ "508-678-2811"] = "BBC";

    if(phone_book.find( "411" ) != phone_book.end())
    {
      phone_book.insert(make_pair(string( "411"), string( "Directory")));
    }

    assert(phone_book.size() == 3);
    map< string, string >::const_iterator it3;

    for(it3 = phone_book.begin(); it3 != phone_book.end(); ++it3)
    {
      cout << " " << it3->first << " " << it3->second << endl;
    }
    /* Output:
    411 Directory
    508-678-2811 BBC
    911 Emergency
    */

    // Part 23    STD library pt 2

    cout << "\n"; // give space between outputs
    int arr[100];
    sort( arr, arr + 100);
    vector< int > v1;
    sort( v1.begin(), v1.end());

    // Part 25    STD library pt 2

    cout << "\n"; // give space between outputs
    vector< int > v2;
    int count_less = count_if(v2.begin(), v2.end(), less_than_7);

      return 0; 
 }

 
    bool less_than_7( int value)
    {
      return value < 7;
    }
      
    
